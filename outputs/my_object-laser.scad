// Generated by SolidPython 1.1.3 on 2022-12-29 09:15:32
$fn = 50;


union() {
	translate(v = [0, 0, 0]) {
		projection() {
			intersection() {
				translate(v = [-500, -500, 0]) {
					cube(size = [1000, 1000, 0.1000000000]);
				}
				difference() {
					union() {
						translate(v = [-15.0962945311, 12.6859059576, -2.9885878547]) {
							rotate(a = [-1.1924682178, 16.5638556361, -20.0633439307]) {
								hull() {
									translate(v = [2.7731274394, 2.4699641558, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.9128519047, r = 4.9083300126);
												}
											}
										}
									}
									translate(v = [7.6814574519, 2.4699641558, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.9128519047, r = 4.9083300126);
												}
											}
										}
									}
									translate(v = [2.7731274394, 7.3782941683, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.9128519047, r = 4.9083300126);
												}
											}
										}
									}
									translate(v = [7.6814574519, 7.3782941683, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.9128519047, r = 4.9083300126);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-16.4738717470, 1.1763650219, 1.8376663872]) {
							rotate(a = [-142.1568921672, 99.7103547807, -64.6465368479]) {
								hull() {
									translate(v = [3.7108372210, 2.9391611768, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 14.5959631061, r = 2.9850812248);
												}
											}
										}
									}
									translate(v = [6.6959184458, 2.9391611768, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 14.5959631061, r = 2.9850812248);
												}
											}
										}
									}
									translate(v = [3.7108372210, 5.9242424016, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 14.5959631061, r = 2.9850812248);
												}
											}
										}
									}
									translate(v = [6.6959184458, 5.9242424016, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 14.5959631061, r = 2.9850812248);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [2.5708801109, 17.4443971716, -1.6743323952]) {
							rotate(a = [-155.0200525390, -10.3425692468, -81.8683899981]) {
								hull() {
									translate(v = [1.5821271109, 5.1868915335, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.3365021219, r = 3.7219961329);
												}
											}
										}
									}
									translate(v = [5.3041232439, 5.1868915335, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.3365021219, r = 3.7219961329);
												}
											}
										}
									}
									translate(v = [1.5821271109, 8.9088876664, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.3365021219, r = 3.7219961329);
												}
											}
										}
									}
									translate(v = [5.3041232439, 8.9088876664, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.3365021219, r = 3.7219961329);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-3.9287566513, 5.8696225847, 2.8845268547]) {
							rotate(a = [-124.5735208292, -21.4618120718, -34.4234661756]) {
								hull() {
									translate(v = [4.9692068562, 2.2530694865, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.0791668089, r = 2.3639754537);
												}
											}
										}
									}
									translate(v = [7.3331823099, 2.2530694865, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.0791668089, r = 2.3639754537);
												}
											}
										}
									}
									translate(v = [4.9692068562, 4.6170449402, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.0791668089, r = 2.3639754537);
												}
											}
										}
									}
									translate(v = [7.3331823099, 4.6170449402, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.0791668089, r = 2.3639754537);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-18.6377088580, 2.3712467665, -6.3403349746]) {
							rotate(a = [-123.3340003172, 157.2283803246, 10.5372697723]) {
								hull() {
									translate(v = [5.7882586844, 1.3838715988, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.8793554541, r = 2.7634319247);
												}
											}
										}
									}
									translate(v = [8.5516906091, 1.3838715988, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.8793554541, r = 2.7634319247);
												}
											}
										}
									}
									translate(v = [5.7882586844, 4.1473035234, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.8793554541, r = 2.7634319247);
												}
											}
										}
									}
									translate(v = [8.5516906091, 4.1473035234, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.8793554541, r = 2.7634319247);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-5.8459583188, 15.9495957096, 11.2451830352]) {
							rotate(a = [157.4580173388, 23.3085126037, -140.0284668582]) {
								hull() {
									translate(v = [2.3639234860, 3.3695732502, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.1530414183, r = 1.3100001809);
												}
											}
										}
									}
									translate(v = [3.6739236670, 3.3695732502, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.1530414183, r = 1.3100001809);
												}
											}
										}
									}
									translate(v = [2.3639234860, 4.6795734312, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.1530414183, r = 1.3100001809);
												}
											}
										}
									}
									translate(v = [3.6739236670, 4.6795734312, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.1530414183, r = 1.3100001809);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-6.4688641467, 19.2470115818, 15.5747416839]) {
							rotate(a = [12.2558010106, 36.3682598051, -81.2502884270]) {
								hull() {
									translate(v = [2.7465433524, 3.4492383964, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.0913214020, r = 0.7609158924);
												}
											}
										}
									}
									translate(v = [3.5074592448, 3.4492383964, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.0913214020, r = 0.7609158924);
												}
											}
										}
									}
									translate(v = [2.7465433524, 4.2101542888, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.0913214020, r = 0.7609158924);
												}
											}
										}
									}
									translate(v = [3.5074592448, 4.2101542888, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 5.0913214020, r = 0.7609158924);
												}
											}
										}
									}
								}
							}
						}
					}
					union() {
						translate(v = [-2.1666660619, 11.8491788266, 13.2011866147]) {
							rotate(a = [104.7149161486, 111.0095408350, -30.9078734069]) {
								hull() {
									translate(v = [3.0686945965, 0.7109114710, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.3246803405, r = 4.2951602163);
												}
											}
										}
									}
									translate(v = [7.3638548128, 0.7109114710, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.3246803405, r = 4.2951602163);
												}
											}
										}
									}
									translate(v = [3.0686945965, 5.0060716873, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.3246803405, r = 4.2951602163);
												}
											}
										}
									}
									translate(v = [7.3638548128, 5.0060716873, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.3246803405, r = 4.2951602163);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-13.5635095979, 13.0479600953, 3.5310338584]) {
							rotate(a = [-156.6205910798, 119.3064841799, 21.3874849900]) {
								hull() {
									translate(v = [6.1989733286, 2.0974864119, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.6484364416, r = 1.9748482273);
												}
											}
										}
									}
									translate(v = [8.1738215559, 2.0974864119, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.6484364416, r = 1.9748482273);
												}
											}
										}
									}
									translate(v = [6.1989733286, 4.0723346392, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.6484364416, r = 1.9748482273);
												}
											}
										}
									}
									translate(v = [8.1738215559, 4.0723346392, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.6484364416, r = 1.9748482273);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [8.7140163020, -3.1811317607, 5.0917407875]) {
							rotate(a = [-137.2852685630, -117.6947732750, 176.8788542622]) {
								hull() {
									translate(v = [5.6831366673, 3.4798760072, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.9552508428, r = 0.5243796823);
												}
											}
										}
									}
									translate(v = [6.2075163497, 3.4798760072, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.9552508428, r = 0.5243796823);
												}
											}
										}
									}
									translate(v = [5.6831366673, 4.0042556896, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.9552508428, r = 0.5243796823);
												}
											}
										}
									}
									translate(v = [6.2075163497, 4.0042556896, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.9552508428, r = 0.5243796823);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-19.1829269266, -0.8851321188, -13.5675429357]) {
							rotate(a = [39.7435538565, -46.9169239345, -33.0388394087]) {
								hull() {
									translate(v = [5.6152349891, 5.0745794283, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.7500961177, r = 1.4543382894);
												}
											}
										}
									}
									translate(v = [7.0695732785, 5.0745794283, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.7500961177, r = 1.4543382894);
												}
											}
										}
									}
									translate(v = [5.6152349891, 6.5289177177, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.7500961177, r = 1.4543382894);
												}
											}
										}
									}
									translate(v = [7.0695732785, 6.5289177177, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.7500961177, r = 1.4543382894);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [11.7637436867, 2.6978994893, 19.3299601592]) {
							rotate(a = [-82.9732821063, -88.1703140131, 14.8541359364]) {
								hull() {
									translate(v = [3.2223983047, 2.2764499568, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.6369497048, r = 4.4971997683);
												}
											}
										}
									}
									translate(v = [7.7195980730, 2.2764499568, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.6369497048, r = 4.4971997683);
												}
											}
										}
									}
									translate(v = [3.2223983047, 6.7736497251, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.6369497048, r = 4.4971997683);
												}
											}
										}
									}
									translate(v = [7.7195980730, 6.7736497251, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 13.6369497048, r = 4.4971997683);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [13.4516750260, -1.0161733111, -17.9867273398]) {
							rotate(a = [-71.1806683514, 123.6284223210, -36.2985985039]) {
								hull() {
									translate(v = [3.4546361684, 4.4530069914, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.2370409168, r = 3.9350057581);
												}
											}
										}
									}
									translate(v = [7.3896419264, 4.4530069914, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.2370409168, r = 3.9350057581);
												}
											}
										}
									}
									translate(v = [3.4546361684, 8.3880127495, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.2370409168, r = 3.9350057581);
												}
											}
										}
									}
									translate(v = [7.3896419264, 8.3880127495, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 7.2370409168, r = 3.9350057581);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-1.4316981843, 9.2208980135, -18.0094882401]) {
							rotate(a = [28.7281945628, 118.6802681344, -84.5776493250]) {
								hull() {
									translate(v = [1.7548031858, 3.0123987728, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.0193256771, r = 1.5508600391);
												}
											}
										}
									}
									translate(v = [3.3056632250, 3.0123987728, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.0193256771, r = 1.5508600391);
												}
											}
										}
									}
									translate(v = [1.7548031858, 4.5632588119, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.0193256771, r = 1.5508600391);
												}
											}
										}
									}
									translate(v = [3.3056632250, 4.5632588119, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.0193256771, r = 1.5508600391);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [1.6102917141, -8.1644053169, -18.4087619249]) {
							rotate(a = [-150.0782725540, -38.0741340359, 129.4174832234]) {
								hull() {
									translate(v = [3.6419923756, 4.7236279815, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.1587863206, r = 4.1812872986);
												}
											}
										}
									}
									translate(v = [7.8232796742, 4.7236279815, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.1587863206, r = 4.1812872986);
												}
											}
										}
									}
									translate(v = [3.6419923756, 8.9049152801, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.1587863206, r = 4.1812872986);
												}
											}
										}
									}
									translate(v = [7.8232796742, 8.9049152801, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 10.1587863206, r = 4.1812872986);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [9.7778933948, 16.2107902139, -8.8913803892]) {
							rotate(a = [56.3682558511, -106.7909085895, 138.8425040784]) {
								hull() {
									translate(v = [5.8746683204, 2.1753710689, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.1720256671, r = 1.2135985219);
												}
											}
										}
									}
									translate(v = [7.0882668423, 2.1753710689, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.1720256671, r = 1.2135985219);
												}
											}
										}
									}
									translate(v = [5.8746683204, 3.3889695908, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.1720256671, r = 1.2135985219);
												}
											}
										}
									}
									translate(v = [7.0882668423, 3.3889695908, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 11.1720256671, r = 1.2135985219);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-6.5865292425, -3.3054677042, -18.0713286494]) {
							rotate(a = [-174.9544354818, 118.0579508795, -143.2950302366]) {
								hull() {
									translate(v = [4.3915044056, 4.0323911298, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.4344175683, r = 4.0759411130);
												}
											}
										}
									}
									translate(v = [8.4674455186, 4.0323911298, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.4344175683, r = 4.0759411130);
												}
											}
										}
									}
									translate(v = [4.3915044056, 8.1083322428, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.4344175683, r = 4.0759411130);
												}
											}
										}
									}
									translate(v = [8.4674455186, 8.1083322428, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.4344175683, r = 4.0759411130);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-2.0082969926, -18.6708062773, 18.6741582176]) {
							rotate(a = [-159.4345013336, -92.7863182405, 104.8914216922]) {
								hull() {
									translate(v = [6.5172196491, 3.5138145784, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.9220521792, r = 1.0707745630);
												}
											}
										}
									}
									translate(v = [7.5879942121, 3.5138145784, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.9220521792, r = 1.0707745630);
												}
											}
										}
									}
									translate(v = [6.5172196491, 4.5845891413, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.9220521792, r = 1.0707745630);
												}
											}
										}
									}
									translate(v = [7.5879942121, 4.5845891413, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.9220521792, r = 1.0707745630);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-14.3287935310, -19.3361751369, 15.1904627705]) {
							rotate(a = [-141.3725396867, -4.2324385655, 70.3917489817]) {
								hull() {
									translate(v = [5.3251838078, 3.0970701324, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.2174661564, r = 1.1839036498);
												}
											}
										}
									}
									translate(v = [6.5090874576, 3.0970701324, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.2174661564, r = 1.1839036498);
												}
											}
										}
									}
									translate(v = [5.3251838078, 4.2809737822, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.2174661564, r = 1.1839036498);
												}
											}
										}
									}
									translate(v = [6.5090874576, 4.2809737822, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 9.2174661564, r = 1.1839036498);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [-7.5891243404, -9.0524216834, 14.7441971550]) {
							rotate(a = [115.6353202440, 69.8828228803, 119.1108260044]) {
								hull() {
									translate(v = [1.7183812788, 5.0719347231, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.4999424455, r = 3.9339416704);
												}
											}
										}
									}
									translate(v = [5.6523229492, 5.0719347231, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.4999424455, r = 3.9339416704);
												}
											}
										}
									}
									translate(v = [1.7183812788, 9.0058763935, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.4999424455, r = 3.9339416704);
												}
											}
										}
									}
									translate(v = [5.6523229492, 9.0058763935, 0]) {
										rotate(a = [0, 0, 0]) {
											translate(v = [0, 0, -50]) {
												rotate(a = [0, 0, 0]) {
													cylinder(h = 12.4999424455, r = 3.9339416704);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
import os
import subprocess

import OPSC_library_gen

defined_objects = {}

radius_dict = {}
radius_dict['M6'] = 6.5/2

def opsc_make_object(filename, objects, resolution=50, layers = 1, tilediff = 200):
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    final_object = opsc_get_object(objects)
    # Save the final object to the specified filename
    
    #scad_render_to_file(final_object, filename, file_header='$fn = %s;' % resolution, include_orig_code=True)
    #saveToAll(filename)
    filename = filename.replace(".scad","-laser.scad")
    scad_render_to_file(getLaser(final_object, layers=layers, tilediff=tilediff), filename, file_header='$fn = %s;' % resolution, include_orig_code=True)
    saveToAll(filename)


def opsc_get_object(objects):
    # Create the solidpython objects
    positive_objects = [get_opsc_item(obj) for obj in objects if obj['type'] == 'positive']
    negative_objects = [get_opsc_item(obj) for obj in objects if obj['type'] == 'negative']
    # Union the positive objects
    positive_object = union()(*positive_objects)
    # Union the negative objects
    negative_object = union()(*negative_objects)
    # Create the final object by subtracting the negative objects from the positive objects
    return difference()(positive_object, negative_object)

def get_opsc_item(params):
    # A dictionary to map radius string values to numerical values
    #radius_dict = {'small': 5, 'medium': 10, 'large': 15}
    # An array of function names for basic shapes
    basic_shapes = ['cube', 'sphere', 'cylinder']
    
    # An array of function names for other shapes
    other_shapes = ['hole', 'slot', 'rounded_rectangle']
    


    # Convert radius to r if present, and remove radius from the params dictionary
    if 'radius' in params:
        if isinstance(params['radius'], str):
            # Use the radius_dict to map the radius string value to a numerical value
            params['r'] = radius_dict[params['radius']]
        else:
            params['r'] = params['radius']
        del params['radius']
    

    # Check if the object type is a basic shape
    if params['shape'] in basic_shapes:
        # Remove shape and unexpected dictionary values
        allowed_keys = {'size', 'r', 'd', 'h', 'rw', 'rh', 'dw', 'dh'}
        shape_params = {k: v for k, v in params.items() if k in allowed_keys}

        # Call the corresponding function for the shape parameter, using ** notation to pass the shape_params dictionary as keyword arguments
        return get_opsc_transform(params,globals()[params['shape']](**shape_params))
    
    # If the object type is not a basic shape, check if it's a defined object or one of the other shapes
    elif params['shape'] in other_shapes:
        # Call the corresponding function for the shape parameter, passing the params dictionary as an argument
        return get_opsc_transform(params,globals()[params['shape']](params))
    
    # If the object is not a basic shape or a defined object, try to import it from a .scad file
    else:
        obj = defined_objects[params['shape']]
        return get_opsc_transform(params,obj)

def get_opsc_transform(params, solid_obj):
    # Rotate the object based on the 'rot' field in the params dictionary, or the 'rotX', 'rotY', and 'rotZ' fields if 'rot' is not present
    rot = params.get('rot', [])
    if rot:
        rotX, rotY, rotZ = rot
    else:
        rotX = params.get('rotX', 0)
        rotY = params.get('rotY', 0)
        rotZ = params.get('rotZ', 0)
    solid_obj = rotate([rotX, rotY, rotZ])(solid_obj)

    # Translate the object based on the 'pos' field in the params dictionary, or the 'x', 'y', and 'z' fields if 'pos' is not present
    pos = params.get('pos', [])
    if pos:
        x, y, z = pos
    else:
        x = params.get('x', 0)
        y = params.get('y', 0)
        z = params.get('z', 0)
    solid_obj = translate([x, y, z])(solid_obj)
    return solid_obj


import random

def opsc_easy(type, shape, **kwargs):
    obj = {
        'type': type,
        'shape': shape
    }
    for param in ['size', 'r', 'd', 'h', 'rw', 'rh', 'dw', 'dh', 'pos', 'x', 'y', 'z', 'rot', 'rotX', 'rotY', 'rotZ', "w"]:
        if param in kwargs:
            obj[param] = kwargs[param]
    return obj

def hole(params):
    p2 = copy.deepcopy(params)  
    # Check if the radius is a string and replace it with the corresponding value from the dictionary
    if isinstance(p2['r'], str):
        p2['r'] = radius_dict[p2['r']]
    
    # Set the height to 100 if not specified
    if 'h' not in p2:
        p2['h'] = 100
    p2["pos"] = [0,0,-50]
    p2["center"] = True
    # Create the cylinder object
    p2["shape"] = "cylinder"
    p2["type"] = "positive"

    return get_opsc_item(p2)

import copy

def slot(params):  
    p2 = copy.deepcopy(params) 
    if isinstance(p2['r'], str):
        p2['r'] = radius_dict[p2['r']]
    p2["type"] = "positive"
    p2["shape"] = "hole"
    del p2["rot"]
    p2["pos"] = [0,0,0]
    left = copy.deepcopy(p2)
    right = copy.deepcopy(p2)
    left["pos"][0] = p2["w"] / 2 - p2["r"] 
    
    right["pos"][0] = -p2["w"] / 2 + p2["r"] 
    pass
    leftObj = get_opsc_item(left)
    rightObj = get_opsc_item(right)
    return hull()(leftObj, rightObj)

def rounded_rectangle(params):   
    p2 = copy.deepcopy(params) 
    p2["pos"] = p2.get("pos", [0, 0, 0]) 
    p2["type"] = "positive"
    p2["shape"] = "hole"
    p2["pos"] = [0,0,0]
    p2["h"] = p2["size"][2]
    del p2["rot"]    
    tl = copy.deepcopy(p2)
    tr = copy.deepcopy(p2)
    bl = copy.deepcopy(p2)
    br = copy.deepcopy(p2)
    tl["pos"][0] = p2["size"][0] / 2 - p2["r"] / 2
    tl["pos"][1] = p2["size"][1] / 2 - p2["r"] / 2
    tr["pos"][0] = p2["size"][0] / 2 + p2["r"] / 2
    tr["pos"][1] = p2["size"][1] / 2 - p2["r"] / 2
    bl["pos"][0] = p2["size"][0] / 2 - p2["r"] / 2
    bl["pos"][1] = p2["size"][1] / 2 + p2["r"] / 2
    br["pos"][0] = p2["size"][0] / 2 + p2["r"] / 2
    br["pos"][1] = p2["size"][1] / 2 + p2["r"] / 2
    del tl["size"]
    del tr["size"]
    del bl["size"]
    del br["size"]
    tlo = get_opsc_item(tl)
    tro = get_opsc_item(tr)
    blo = get_opsc_item(bl)
    bro = get_opsc_item(br)    
    return hull()(tlo, tro, blo, bro)



def import_scad_object(filename):
    # Import the .scad file and convert it to a solidpython object
    #filename = "parts"
    obj = import_scad(filename)
    return obj.main()
    


import os
import solid as solidpython

# A dictionary to store the defined objects


def load_scad_objects():
    OPSC_library_gen.gen_library(defined_objects)

import random

def test(num_objects):
    objects = []
    for i in range(num_objects):
        # Choose a random shape
        #shape = random.choice(['cube', 'sphere', 'cylinder', 'hole', 'slot', "rounded_rectangle"])
        shape = random.choice(["rounded_rectangle"])

        # Choose a random type
        type = random.choice(['positive', 'negative'])
        
        # Create an empty object dictionary
        obj = {'shape': shape, 'type': type}
        
        # Set shape-specific parameters
        if obj['shape'] in ['cube']:
            obj['size'] =  [random.uniform(5, 15), random.uniform(5, 15), random.uniform(5, 15)]
        if obj['shape'] in ['rounded_rectangle']:
            obj['size'] =  [random.uniform(5, 15), random.uniform(5, 15), random.uniform(5, 15)]
            obj['r'] = random.uniform(0.5, 5)
        elif obj['shape'] == 'sphere':
            obj['r'] = random.uniform(5, 15)
        elif obj['shape'] in ['cylinder', 'hole']:
            obj['r'] = random.uniform(0.5, 5)
            obj['h'] = random.uniform(5, 15)
        elif obj['shape'] == 'slot':
            obj['r'] = random.uniform(0.5, 5)
            obj['h'] = random.uniform(5, 15)
            obj['w'] = random.uniform(5, 15)
        
        # Set a random position and rotation
        obj['pos'] = [random.uniform(-20, 20), random.uniform(-20, 20), random.uniform(-20, 20)]
        obj['rot'] = [random.uniform(-180, 180), random.uniform(-180, 180), random.uniform(-180, 180)]
        
        # Add the object to the list
        objects.append(obj)
    return objects

####### old file saving
def saveToAll(fileIn):
    saveToDxf(fileIn)
    saveToPng(fileIn)
    saveToStl(fileIn)
    saveToSvg(fileIn)

def saveToDxf(fileIn, fileOut=""):
    if fileOut == "":
        fileOut = fileIn.replace(".scad",".dxf")
    saveToFile(fileIn, fileOut)
    
def saveToPng(fileIn, fileOut="",extra="--render"):
    if fileOut == "":
        fileOut = fileIn.replace(".scad",".png")
    saveToFile(fileIn, fileOut)

def saveToStl(fileIn, fileOut=""):
    if fileOut == "":
        fileOut = fileIn.replace(".scad",".stl")
    saveToFile(fileIn, fileOut)
    
def saveToSvg(fileIn, fileOut=""):
    if fileOut == "":
        fileOut = fileIn.replace(".scad",".svg")
    saveToFile(fileIn, fileOut)

def saveToFile(fileIn, fileOut,extra=""):
    extra = extra + " --colorscheme Tomorrow"

    launchStr = 'openscad -o "' + fileOut + '"' + extra + ' "' + fileIn + '"'
    if ".png" in fileOut:
        launchStr = launchStr + " --render"
    print("            saveToFile launch string: " + launchStr)
    subprocess.run(launchStr)
    x=0

def getLaser(final_object,start=0,layers=1,thickness=-3,tilediff=200):
        rv= []

        for x in range(layers):
            rv.append(translate([0,x*tilediff,0])(
                    projection()(
                        intersection()(translate([-500,-500,start+x*thickness])(cube(size=[1000,1000,0.1])),
                            final_object
                        )
                    )
            )
            )
            
        return union()(rv)

load_scad_objects() 
 
************************************************/
